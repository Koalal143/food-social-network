"use client"

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import Container from '@/components/layout/Container';
import { useToast } from '@/hooks/use-toast';

export default function TestDeletePage() {
    const [recipeId, setRecipeId] = useState('');
    const [isCreating, setIsCreating] = useState(false);
    const [isLoggingIn, setIsLoggingIn] = useState(false);
    const { toast } = useToast();

    const createTestUser = async () => {
        setIsLoggingIn(true);
        try {
            const testUser = {
                username: "testuser",
                email: "test@example.com", 
                password: "testpassword123",
                first_name: "–¢–µ—Å—Ç",
                last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            };

            // –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            try {
                const registerResponse = await fetch('http://localhost:8000/v1/auth/register', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(testUser)
                });
                
                if (registerResponse.ok) {
                    toast({
                        title: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
                        description: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
                    });
                }
            } catch (e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
            }

            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            const loginResponse = await fetch('http://localhost:8000/v1/auth/login', {
                method: 'POST',
                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                body: new URLSearchParams({
                    username: testUser.username,
                    password: testUser.password
                })
            });

            if (!loginResponse.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }

            const tokens = await loginResponse.json();
            localStorage.setItem('access_token', tokens.access_token);
            localStorage.setItem('refresh_token', tokens.refresh_token);

            toast({
                title: "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞",
                description: "–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            });

            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.location.reload();

        } catch (error) {
            toast({
                variant: "destructive",
                title: "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                description: error.message
            });
        } finally {
            setIsLoggingIn(false);
        }
    };

    const createTestRecipe = async () => {
        setIsCreating(true);
        try {
            const token = localStorage.getItem('access_token');
            if (!token) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
            }

            const testRecipe = {
                title: "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                short_description: "–ü—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è",
                difficulty: "easy",
                cook_time_minutes: 30,
                tags: [
                    { name: "–¢–µ—Å—Ç" },
                    { name: "–ó–∞–≤—Ç—Ä–∞–∫" }
                ],
                ingredients: [
                    {
                        name: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1",
                        amount: "100",
                        unit: "–≥"
                    },
                    {
                        name: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2",
                        amount: "2", 
                        unit: "—à—Ç"
                    }
                ],
                instructions: [
                    {
                        step_number: 1,
                        description: "–ü–µ—Ä–≤—ã–π —à–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"
                    },
                    {
                        step_number: 2,
                        description: "–í—Ç–æ—Ä–æ–π —à–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"
                    }
                ]
            };

            const response = await fetch('http://localhost:8000/v1/recipes', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(testRecipe)
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞');
            }

            const recipe = await response.json();
            setRecipeId(recipe.id);

            toast({
                title: "–†–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω",
                description: `–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${recipe.id}`
            });

        } catch (error) {
            toast({
                variant: "destructive",
                title: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞",
                description: error.message
            });
        } finally {
            setIsCreating(false);
        }
    };

    const openRecipe = () => {
        if (recipeId) {
            window.open(`/recipe/${recipeId}`, '_blank');
        }
    };

    return (
        <Container>
            <div className="max-w-2xl mx-auto py-8 space-y-6">
                <div className="text-center">
                    <h1 className="text-3xl font-bold mb-4">–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤</h1>
                    <p className="text-muted-foreground">
                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    </p>
                </div>

                <div className="space-y-4 p-6 border rounded-lg">
                    <h2 className="text-xl font-semibold">–®–∞–≥ 1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h2>
                    <p className="text-sm text-muted-foreground">
                        –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É
                    </p>
                    <Button 
                        onClick={createTestUser}
                        disabled={isLoggingIn}
                        className="w-full"
                    >
                        {isLoggingIn ? '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–π—Ç–∏'}
                    </Button>
                </div>

                <div className="space-y-4 p-6 border rounded-lg">
                    <h2 className="text-xl font-semibold">–®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞</h2>
                    <p className="text-sm text-muted-foreground">
                        –°–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
                    </p>
                    <Button 
                        onClick={createTestRecipe}
                        disabled={isCreating}
                        className="w-full"
                    >
                        {isCreating ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç'}
                    </Button>
                </div>

                {recipeId && (
                    <div className="space-y-4 p-6 border rounded-lg bg-green-50">
                        <h2 className="text-xl font-semibold text-green-800">–®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
                        <p className="text-sm text-green-700">
                            –†–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω —Å ID: <strong>{recipeId}</strong>
                        </p>
                        <Button 
                            onClick={openRecipe}
                            className="w-full"
                        >
                            –û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
                        </Button>
                    </div>
                )}

                <div className="space-y-4 p-6 border rounded-lg bg-blue-50">
                    <h2 className="text-xl font-semibold text-blue-800">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é</h2>
                    <ol className="list-decimal list-inside space-y-2 text-sm text-blue-700">
                        <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–π—Ç–∏"</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç"</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ "–û—Ç–∫—Ä—ã—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"</li>
                        <li>–ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞–π–¥–∏—Ç–µ –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è (üóëÔ∏è)</li>
                        <li>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ (üîç) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏</li>
                        <li>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç</li>
                    </ol>
                </div>
            </div>
        </Container>
    );
}
