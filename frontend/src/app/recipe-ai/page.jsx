"use client"

import { useState, useEffect } from 'react';
import Container from "@/components/layout/Container";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent } from "@/components/ui/card";
import { Bot, ChefHat, Clock, Timer, Calculator, Heart, Share, Printer, Scale } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import confetti from 'canvas-confetti';

const COOKING_METHODS = [
    { id: 'pan', label: '–°–∫–æ–≤–æ—Ä–æ–¥–∫–∞', icon: 'üç≥' },
    { id: 'oven', label: '–î—É—Ö–æ–≤–∫–∞', icon: 'üî•' },
    { id: 'pot', label: '–ö–∞—Å—Ç—Ä—é–ª—è', icon: 'ü•ò' },
    { id: 'multicooker', label: '–ú—É–ª—å—Ç–∏–≤–∞—Ä–∫–∞', icon: '‚ö°' },
];

const COOKING_TIMES = [
    { id: 'quick', label: '–î–æ 30 –º–∏–Ω—É—Ç', description: '–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ–∫—É—Å–∞' },
    { id: 'medium', label: '30-60 –º–∏–Ω—É—Ç', description: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è' },
    { id: 'long', label: '–ë–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç', description: '–î–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤' },
];

const DIET_PREFERENCES = [
    { id: 'any', label: '–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π', icon: 'üçΩÔ∏è', description: '–ï–º –≤—Å—ë' },
    { id: 'vegetarian', label: '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü', icon: 'ü•ó', description: '–ë–µ–∑ –º—è—Å–∞' },
    { id: 'vegan', label: '–í–µ–≥–∞–Ω', icon: 'üå±', description: '–¢–æ–ª—å–∫–æ —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–∞—è –ø–∏—â–∞' },
    { id: 'pescatarian', label: '–ü–µ—Å–∫–µ—Ç–∞—Ä–∏–∞–Ω–µ—Ü', icon: 'üêü', description: '–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã' },
];

const HEALTH_GOALS = [
    { id: 'balanced', label: '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ', icon: '‚öñÔ∏è', description: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –ë–ñ–£' },
    { id: 'protein', label: '–í—ã—Å–æ–∫–æ–±–µ–ª–∫–æ–≤–æ–µ', icon: 'üí™', description: '–î–ª—è –Ω–∞–±–æ—Ä–∞ –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã' },
    { id: 'lowcarb', label: '–ù–∏–∑–∫–æ—É–≥–ª–µ–≤–æ–¥–Ω–æ–µ', icon: 'ü•ë', description: '–î–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –≤–µ—Å–∞' },
    { id: 'keto', label: '–ö–µ—Ç–æ', icon: 'ü•ì', description: '–ú–∏–Ω–∏–º—É–º —É–≥–ª–µ–≤–æ–¥–æ–≤' },
];

const SPICINESS_LEVELS = [
    { id: 'mild', label: '–ú—è–≥–∫–æ–µ', icon: 'üå±', description: '–ë–µ–∑ –æ—Å—Ç—Ä—ã—Ö —Å–ø–µ—Ü–∏–π' },
    { id: 'medium', label: '–°—Ä–µ–¥–Ω–µ', icon: 'üå∂Ô∏è', description: '–ù–µ–º–Ω–æ–≥–æ –æ—Å—Ç—Ä–æ—Ç—ã' },
    { id: 'spicy', label: '–û—Å—Ç—Ä–æ–µ', icon: 'üî•', description: '–õ—é–±–ª—é –ø–æ–æ—Å—Ç—Ä–µ–µ' },
    { id: 'very_spicy', label: '–û—á–µ–Ω—å –æ—Å—Ç—Ä–æ–µ', icon: 'üî•üî•', description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—Å—Ç—Ä–æ–µ' },
];

const PORTION_SIZES = {
    small: { label: '–ú–∞–ª–µ–Ω—å–∫–∞—è', multiplier: 0.5 },
    medium: { label: '–°—Ä–µ–¥–Ω—è—è', multiplier: 1 },
    large: { label: '–ë–æ–ª—å—à–∞—è', multiplier: 1.5 },
    xl: { label: '–û—á–µ–Ω—å –±–æ–ª—å—à–∞—è', multiplier: 2 }
};

const CardHoverEffect = ({ children, selected, onClick }) => (
    <motion.div
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        animate={{ 
            borderColor: selected ? 'hsl(var(--primary))' : 'hsl(var(--border))',
            backgroundColor: selected ? 'hsl(var(--primary) / 0.1)' : 'transparent'
        }}
        onClick={onClick}
        className="cursor-pointer transition-colors"
    >
        {children}
    </motion.div>
);

export default function RecipeAIPage() {
    const [step, setStep] = useState(0);
    const [cookingMethod, setCookingMethod] = useState('');
    const [cookingTime, setCookingTime] = useState('');
    const [dietPreference, setDietPreference] = useState('');
    const [healthGoal, setHealthGoal] = useState('');
    const [spicinessLevel, setSpicinessLevel] = useState('');
    const [allergies, setAllergies] = useState('');
    const [ingredients, setIngredients] = useState('');
    const [generatedRecipe, setGeneratedRecipe] = useState('');
    const [isGenerating, setIsGenerating] = useState(false);
    const [chefState, setChefState] = useState('idle'); // idle, thinking, cooking
    const [portionSize, setPortionSize] = useState('medium');
    const [isFavorite, setIsFavorite] = useState(false);
    const [timer, setTimer] = useState(null);
    const [isTimerRunning, setIsTimerRunning] = useState(false);
    const [timeLeft, setTimeLeft] = useState(0);

    useEffect(() => {
        const savedRecipes = localStorage.getItem('favoriteRecipes');
        if (savedRecipes) {
            const recipes = JSON.parse(savedRecipes);
            setIsFavorite(recipes.includes(generatedRecipe));
        }
    }, [generatedRecipe]);

    useEffect(() => {
        let interval;
        if (isTimerRunning && timeLeft > 0) {
            interval = setInterval(() => {
                setTimeLeft(time => {
                    if (time <= 1) {
                        setIsTimerRunning(false);
                        new Audio('/notification.mp3').play().catch(() => {});
                        return 0;
                    }
                    return time - 1;
                });
            }, 1000);
        }
        return () => clearInterval(interval);
    }, [isTimerRunning, timeLeft]);

    const startTimer = (minutes) => {
        setTimeLeft(minutes * 60);
        setIsTimerRunning(true);
    };

    const toggleFavorite = () => {
        setIsFavorite(!isFavorite);
        const savedRecipes = JSON.parse(localStorage.getItem('favoriteRecipes') || '[]');
        if (!isFavorite) {
            savedRecipes.push(generatedRecipe);
        } else {
            const index = savedRecipes.indexOf(generatedRecipe);
            if (index > -1) {
                savedRecipes.splice(index, 1);
            }
        }
        localStorage.setItem('favoriteRecipes', JSON.stringify(savedRecipes));
    };

    const shareRecipe = async () => {
        if (navigator.share) {
            try {
                await navigator.share({
                    title: '–†–µ—Ü–µ–ø—Ç –æ—Ç –°–≤–∞–π–ø–∞',
                    text: generatedRecipe,
                });
            } catch (error) {
                console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è:', error);
            }
        }
    };

    const printRecipe = () => {
        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <html>
                <head>
                    <title>–†–µ—Ü–µ–ø—Ç –æ—Ç –°–≤–∞–π–ø–∞</title>
                    <style>
                        body { font-family: Arial, sans-serif; padding: 20px; }
                        h1 { color: #333; }
                        .recipe { white-space: pre-line; }
                    </style>
                </head>
                <body>
                    <h1>–†–µ—Ü–µ–ø—Ç –æ—Ç –°–≤–∞–π–ø–∞</h1>
                    <div class="recipe">${generatedRecipe}</div>
                </body>
            </html>
        `);
        printWindow.document.close();
        printWindow.print();
    };

    const formatTime = (seconds) => {
        const mins = Math.floor(seconds / 60);
        const secs = seconds % 60;
        return `${mins}:${secs.toString().padStart(2, '0')}`;
    };

    const triggerConfetti = () => {
        const count = 200;
        const defaults = {
            origin: { y: 0.7 }
        };

        function fire(particleRatio, opts) {
            confetti({
                ...defaults,
                ...opts,
                particleCount: Math.floor(count * particleRatio)
            });
        }

        fire(0.25, {
            spread: 26,
            startVelocity: 55,
        });

        fire(0.2, {
            spread: 60,
        });

        fire(0.35, {
            spread: 100,
            decay: 0.91,
            scalar: 0.8
        });

        fire(0.1, {
            spread: 120,
            startVelocity: 25,
            decay: 0.92,
            scalar: 1.2
        });

        fire(0.1, {
            spread: 120,
            startVelocity: 45,
        });
    };

    const handleGenerateRecipe = () => {
        setIsGenerating(true);
        setChefState('thinking');
        
        setTimeout(() => {
            setChefState('cooking');
            setTimeout(() => {
                setGeneratedRecipe(`
                    üéâ –í–æ—Ç —á—Ç–æ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –≤–∞—à–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤:
                    
                    –ù–∞–∑–≤–∞–Ω–∏–µ: –ü–∞—Å—Ç–∞ —Å –æ–≤–æ—â–∞–º–∏
                    
                    –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: ${DIET_PREFERENCES.find(d => d.id === dietPreference)?.label || '–≤—Å–µ—Ö'}
                    –£—Ä–æ–≤–µ–Ω—å –æ—Å—Ç—Ä–æ—Ç—ã: ${SPICINESS_LEVELS.find(s => s.id === spicinessLevel)?.label || '—Å—Ä–µ–¥–Ω–∏–π'}
                    –¶–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è: ${HEALTH_GOALS.find(h => h.id === healthGoal)?.label || '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ'}
                    
                    –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:
                    - –ü–∞—Å—Ç–∞ –∏–∑ —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤–æ–π –º—É–∫–∏
                    - –ü–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏
                    - –ë–∞–∑–∏–ª–∏–∫
                    - –ß–µ—Å–Ω–æ–∫
                    - –û–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ
                    
                    –ü–∏—â–µ–≤–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 100–≥:
                    - –ë–µ–ª–∫–∏: 12–≥
                    - –ñ–∏—Ä—ã: 5–≥
                    - –£–≥–ª–µ–≤–æ–¥—ã: 45–≥
                    - –ö–∞–ª–æ—Ä–∏–∏: 275 –∫–∫–∞–ª
                    
                    –°–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:
                    1. –û—Ç–≤–∞—Ä–∏—Ç–µ –ø–∞—Å—Ç—É –≤ –ø–æ–¥—Å–æ–ª–µ–Ω–Ω–æ–π –≤–æ–¥–µ –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª—å –¥–µ–Ω—Ç–µ
                    2. –û–±–∂–∞—Ä—å—Ç–µ —á–µ—Å–Ω–æ–∫ –Ω–∞ –æ–ª–∏–≤–∫–æ–≤–æ–º –º–∞—Å–ª–µ
                    3. –î–æ–±–∞–≤—å—Ç–µ –Ω–∞—Ä–µ–∑–∞–Ω–Ω—ã–µ –ø–æ–º–∏–¥–æ—Ä—ã —á–µ—Ä—Ä–∏
                    4. –°–º–µ—à–∞–π—Ç–µ —Å –ø–∞—Å—Ç–æ–π
                    5. –£–∫—Ä–∞—Å—å—Ç–µ —Å–≤–µ–∂–∏–º –±–∞–∑–∏–ª–∏–∫–æ–º
                    
                    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçù
                `);
                setIsGenerating(false);
                setChefState('idle');
                setStep(8);
                triggerConfetti();
            }, 2000);
        }, 2000);
    };

    const renderMethodCard = (method) => (
        <CardHoverEffect selected={cookingMethod === method.id} onClick={() => setCookingMethod(method.id)}>
            <Card>
                <CardContent className="flex flex-col items-center justify-center p-4 text-center">
                    <motion.span 
                        className="text-4xl mb-2"
                        animate={{ rotate: cookingMethod === method.id ? [0, 10, -10, 0] : 0 }}
                        transition={{ duration: 0.5 }}
                    >
                        {method.icon}
                    </motion.span>
                    <span className="font-medium">{method.label}</span>
                </CardContent>
            </Card>
        </CardHoverEffect>
    );

    const renderDietCard = (diet) => (
        <CardHoverEffect selected={dietPreference === diet.id} onClick={() => setDietPreference(diet.id)}>
            <Card>
                <CardContent className="flex flex-col items-center justify-center p-4 text-center">
                    <motion.span 
                        className="text-4xl mb-2"
                        animate={{ 
                            scale: dietPreference === diet.id ? [1, 1.2, 1] : 1,
                            rotate: dietPreference === diet.id ? [0, 10, -10, 0] : 0
                        }}
                        transition={{ duration: 0.5 }}
                    >
                        {diet.icon}
                    </motion.span>
                    <span className="font-medium">{diet.label}</span>
                    <span className="text-xs text-muted-foreground">{diet.description}</span>
                </CardContent>
            </Card>
        </CardHoverEffect>
    );

    const renderRecipeActions = () => (
        <div className="flex gap-2 justify-center mt-4">
            <Button
                variant="outline"
                size="icon"
                onClick={toggleFavorite}
                className={isFavorite ? 'text-red-500' : ''}
            >
                <Heart className={`h-4 w-4 ${isFavorite ? 'fill-current' : ''}`} />
            </Button>
            <Button variant="outline" size="icon" onClick={shareRecipe}>
                <Share className="h-4 w-4" />
            </Button>
            <Button variant="outline" size="icon" onClick={printRecipe}>
                <Printer className="h-4 w-4" />
            </Button>
        </div>
    );

    const renderPortionCalculator = () => (
        <div className="mt-4 space-y-2">
            <h4 className="font-medium">–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏:</h4>
            <div className="flex gap-2">
                {Object.entries(PORTION_SIZES).map(([size, { label, multiplier }]) => (
                    <Button
                        key={size}
                        variant={portionSize === size ? 'default' : 'outline'}
                        onClick={() => setPortionSize(size)}
                        className="flex-1"
                    >
                        <Scale className="h-4 w-4 mr-2" />
                        {label}
                    </Button>
                ))}
            </div>
        </div>
    );

    const renderTimer = () => (
        <div className="mt-4 space-y-2">
            <h4 className="font-medium">–¢–∞–π–º–µ—Ä –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:</h4>
            <div className="flex items-center gap-2">
                <div className="flex-1 text-center text-2xl font-bold">
                    {formatTime(timeLeft)}
                </div>
                {!isTimerRunning ? (
                    <div className="flex gap-2">
                        <Button onClick={() => startTimer(5)} variant="outline">
                            5 –º–∏–Ω
                        </Button>
                        <Button onClick={() => startTimer(10)} variant="outline">
                            10 –º–∏–Ω
                        </Button>
                        <Button onClick={() => startTimer(15)} variant="outline">
                            15 –º–∏–Ω
                        </Button>
                    </div>
                ) : (
                    <Button onClick={() => setIsTimerRunning(false)} variant="destructive">
                        –°—Ç–æ–ø
                    </Button>
                )}
            </div>
        </div>
    );

    const renderStep = () => {
        switch(step) {
            case 0:
                return (
                    <motion.div 
                        className="space-y-6 text-center"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5 }}
                    >
                        <div className="flex justify-center flex-col items-center">
                            <ChefHat className="h-24 w-24 text-primary animate-bounce" />
                            <h2 className="text-2xl font-bold text-primary mt-4">–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —à–µ—Ñ-–ø–æ–≤–∞—Ä, –°–≤–∞–π–ø üë®‚Äçüç≥</h2>
                        </div>
                        <p className="text-muted-foreground">
                            –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ–µ –±–ª—é–¥–æ, —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.
                            –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!
                        </p>
                        <Button onClick={() => setStep(1)} className="w-full sm:w-auto">
                            <Bot className="mr-2 h-4 w-4" />
                            –ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å
                        </Button>
                    </motion.div>
                );

            case 1:
                return (
                    <motion.div 
                        className="space-y-6"
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                    >
                        <h3 className="text-xl font-semibold">–ö–∞–∫–æ–π —É –≤–∞—Å —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è?</h3>
                        <div className="grid grid-cols-2 gap-4">
                            {DIET_PREFERENCES.map(renderDietCard)}
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(0)}>–ù–∞–∑–∞–¥</Button>
                            <Button onClick={() => setStep(2)} disabled={!dietPreference}>–î–∞–ª–µ–µ</Button>
                        </div>
                    </motion.div>
                );

            case 2:
                return (
                    <div className="space-y-6">
                        <h3 className="text-xl font-semibold">–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏—è?</h3>
                        <div className="space-y-4">
                            <Input
                                value={allergies}
                                onChange={(e) => setAllergies(e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –æ—Ä–µ—Ö–∏, –º–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –≥–ª—é—Ç–µ–Ω"
                                className="w-full"
                            />
                            <p className="text-xs text-muted-foreground">
                                –£–∫–∞–∂–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –∞–ª–ª–µ—Ä–≥–∏—è. 
                                –ï—Å–ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏ –Ω–µ—Ç, –æ—Å—Ç–∞–≤—å—Ç–µ –ø–æ–ª–µ –ø—É—Å—Ç—ã–º.
                            </p>
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(1)}>–ù–∞–∑–∞–¥</Button>
                            <Button onClick={() => setStep(3)}>–î–∞–ª–µ–µ</Button>
                        </div>
                    </div>
                );

            case 3:
                return (
                    <div className="space-y-6">
                        <h3 className="text-xl font-semibold">–ö–∞–∫–∞—è —É –≤–∞—Å —Ü–µ–ª—å –ø–∏—Ç–∞–Ω–∏—è?</h3>
                        <div className="grid grid-cols-2 gap-4">
                            {HEALTH_GOALS.map((goal) => (
                                <Card 
                                    key={goal.id}
                                    className={`cursor-pointer transition-all hover:scale-105 ${
                                        healthGoal === goal.id ? 'border-primary' : ''
                                    }`}
                                    onClick={() => setHealthGoal(goal.id)}
                                >
                                    <CardContent className="flex flex-col items-center justify-center p-4 text-center">
                                        <span className="text-4xl mb-2">{goal.icon}</span>
                                        <span className="font-medium">{goal.label}</span>
                                        <span className="text-xs text-muted-foreground">{goal.description}</span>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(2)}>–ù–∞–∑–∞–¥</Button>
                            <Button onClick={() => setStep(4)} disabled={!healthGoal}>–î–∞–ª–µ–µ</Button>
                        </div>
                    </div>
                );

            case 4:
                return (
                    <div className="space-y-6">
                        <h3 className="text-xl font-semibold">–ù–∞—Å–∫–æ–ª—å–∫–æ –æ—Å—Ç—Ä—É—é –ø–∏—â—É –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?</h3>
                        <div className="grid grid-cols-2 gap-4">
                            {SPICINESS_LEVELS.map((level) => (
                                <Card 
                                    key={level.id}
                                    className={`cursor-pointer transition-all hover:scale-105 ${
                                        spicinessLevel === level.id ? 'border-primary' : ''
                                    }`}
                                    onClick={() => setSpicinessLevel(level.id)}
                                >
                                    <CardContent className="flex flex-col items-center justify-center p-4 text-center">
                                        <span className="text-4xl mb-2">{level.icon}</span>
                                        <span className="font-medium">{level.label}</span>
                                        <span className="text-xs text-muted-foreground">{level.description}</span>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(3)}>–ù–∞–∑–∞–¥</Button>
                            <Button onClick={() => setStep(5)} disabled={!spicinessLevel}>–î–∞–ª–µ–µ</Button>
                        </div>
                    </div>
                );

            case 5:
                return (
                    <motion.div 
                        className="space-y-6"
                        initial={{ opacity: 0, x: 20 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: -20 }}
                        transition={{ duration: 0.3 }}
                    >
                        <h3 className="text-xl font-semibold">–ù–∞ —á–µ–º –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å?</h3>
                        <div className="grid grid-cols-2 gap-4">
                            {COOKING_METHODS.map(renderMethodCard)}
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(4)}>–ù–∞–∑–∞–¥</Button>
                            <Button onClick={() => setStep(6)} disabled={!cookingMethod}>–î–∞–ª–µ–µ</Button>
                        </div>
                    </motion.div>
                );

            case 6:
                return (
                    <div className="space-y-6">
                        <h3 className="text-xl font-semibold">–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?</h3>
                        <div className="space-y-4">
                            {COOKING_TIMES.map((time) => (
                                <Card 
                                    key={time.id}
                                    className={`cursor-pointer transition-all hover:scale-105 ${
                                        cookingTime === time.id ? 'border-primary' : ''
                                    }`}
                                    onClick={() => setCookingTime(time.id)}
                                >
                                    <CardContent className="flex items-center p-4">
                                        <Clock className="h-5 w-5 mr-3 text-muted-foreground" />
                                        <div>
                                            <h4 className="font-medium">{time.label}</h4>
                                            <p className="text-sm text-muted-foreground">{time.description}</p>
                                        </div>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(5)}>–ù–∞–∑–∞–¥</Button>
                            <Button onClick={() => setStep(7)} disabled={!cookingTime}>–î–∞–ª–µ–µ</Button>
                        </div>
                    </div>
                );

            case 7:
                return (
                    <div className="space-y-6">
                        <h3 className="text-xl font-semibold">–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å?</h3>
                        <p className="text-sm text-muted-foreground">
                            –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ
                        </p>
                        <div className="space-y-4">
                            <Textarea
                                value={ingredients}
                                onChange={(e) => setIngredients(e.target.value)}
                                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –º–æ—Ä–∫–æ–≤—å, –ª—É–∫"
                                className="min-h-[100px]"
                            />
                            <p className="text-xs text-muted-foreground">
                                –ü–æ–¥—Å–∫–∞–∑–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤—ã —É–∫–∞–∂–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–µ—Ü–µ–ø—Ç
                            </p>
                        </div>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => setStep(6)}>–ù–∞–∑–∞–¥</Button>
                            <Button 
                                onClick={handleGenerateRecipe} 
                                disabled={!ingredients || isGenerating}
                            >
                                {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç...' : '–°–æ–∑–¥–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç'}
                            </Button>
                        </div>
                    </div>
                );

            case 8:
                return (
                    <motion.div 
                        className="space-y-6"
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5 }}
                    >
                        <div className="flex justify-center mb-6">
                            <ChefHat className="h-24 w-24 text-primary animate-bounce" />
                        </div>
                        <h3 className="text-xl font-semibold text-center">–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤! üéâ</h3>
                        <Card>
                            <CardContent className="p-6">
                                <div className="whitespace-pre-line">
                                    {generatedRecipe}
                                </div>
                                {renderRecipeActions()}
                                {renderPortionCalculator()}
                                {renderTimer()}
                            </CardContent>
                        </Card>
                        <div className="flex justify-between">
                            <Button variant="outline" onClick={() => {
                                setStep(0);
                                setCookingMethod('');
                                setCookingTime('');
                                setDietPreference('');
                                setHealthGoal('');
                                setSpicinessLevel('');
                                setAllergies('');
                                setIngredients('');
                                setGeneratedRecipe('');
                                setChefState('idle');
                                setTimeLeft(0);
                                setIsTimerRunning(false);
                            }}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>
                            <Button onClick={() => setStep(7)}>–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã</Button>
                        </div>
                    </motion.div>
                );
        }
    };

    return (
        <Container>
            <div className="max-w-2xl mx-auto py-8">
                {isGenerating && (
                    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center z-50">
                        <div className="text-center">
                            <ChefHat className="h-24 w-24 text-primary animate-bounce" />
                            <p className="mt-4 text-lg font-medium">
                                {chefState === 'thinking' ? '–î—É–º–∞—é –Ω–∞–¥ —Ä–µ—Ü–µ–ø—Ç–æ–º...' : '–ì–æ—Ç–æ–≤–ª—é —Ä–µ—Ü–µ–ø—Ç...'}
                            </p>
                        </div>
                    </div>
                )}
                {renderStep()}
            </div>
        </Container>
    );
} 