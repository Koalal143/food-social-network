import { BASE_API } from '@/constants/backend-urls';

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Ü–µ–ø—Ç–∞
 * @param {number} recipeId ID —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @returns {Promise<Object>} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
export async function diagnoseRecipePage(recipeId) {
    const results = {
        timestamp: new Date().toISOString(),
        recipeId,
        baseApi: BASE_API,
        tests: {}
    };

    console.group(`üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ—Ü–µ–ø—Ç–∞ ID: ${recipeId}`);

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API —Ä–µ—Ü–µ–ø—Ç–æ–≤
    try {
        const url = `${BASE_API}/v1/recipes/${recipeId}`;
        console.log('–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º URL:', url);

        const response = await fetch(url, {
            headers: {
                'Content-Type': 'application/json'
            }
        });

        results.tests.apiAccess = {
            success: response.ok || response.status === 401, // 401 –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç
            status: response.status,
            statusText: response.statusText,
            url: url
        };

        if (response.ok) {
            try {
                const data = await response.json();
                results.tests.apiAccess.data = {
                    hasTitle: !!data.title,
                    hasAuthor: !!data.author,
                    hasIngredients: Array.isArray(data.ingredients),
                    hasInstructions: Array.isArray(data.instructions),
                    hasTags: Array.isArray(data.tags)
                };
                console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω, –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', data.title);
            } catch (parseError) {
                results.tests.apiAccess.parseError = parseError.message;
                console.warn('‚ö†Ô∏è API –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON');
            }
        } else {
            console.warn(`‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status} ${response.statusText}`);
        }
    } catch (error) {
        results.tests.apiAccess = {
            success: false,
            error: error.message,
            type: error.name
        };
        console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API:', error);
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ Next.js
    try {
        const currentUrl = window.location.href;
        const expectedPattern = `/recipe/${recipeId}`;
        const urlMatches = currentUrl.includes(expectedPattern);

        results.tests.routing = {
            success: urlMatches,
            currentUrl,
            expectedPattern,
            matches: urlMatches
        };

        if (urlMatches) {
            console.log('‚úÖ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
        } else {
            console.warn('‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π');
        }
    } catch (error) {
        results.tests.routing = {
            success: false,
            error: error.message
        };
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏:', error);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è RecipeProvider
    try {
        // –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        results.tests.providerState = {
            success: true,
            note: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ RecipeProvider –≤ –∫–æ–Ω—Å–æ–ª–∏'
        };
        console.log('‚ÑπÔ∏è –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è RecipeProvider —Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ');
    } catch (error) {
        results.tests.providerState = {
            success: false,
            error: error.message
        };
    }

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    try {
        const pageElements = {
            container: document.querySelector('[data-testid="recipe-container"]') || document.querySelector('article'),
            title: document.querySelector('h1'),
            image: document.querySelector('img'),
            author: document.querySelector('[data-testid="author-card"]'),
            ingredients: document.querySelector('[data-testid="ingredients"]'),
            instructions: document.querySelector('[data-testid="instructions"]')
        };

        results.tests.pageElements = {
            success: !!pageElements.container,
            elements: Object.fromEntries(
                Object.entries(pageElements).map(([key, element]) => [key, !!element])
            )
        };

        const foundElements = Object.values(pageElements).filter(Boolean).length;
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ${foundElements}/${Object.keys(pageElements).length}`);
    } catch (error) {
        results.tests.pageElements = {
            success: false,
            error: error.message
        };
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
    }

    // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
    const successfulTests = Object.values(results.tests).filter(test => test.success).length;
    const totalTests = Object.keys(results.tests).length;
    
    results.summary = {
        successfulTests,
        totalTests,
        successRate: Math.round((successfulTests / totalTests) * 100),
        overallStatus: successfulTests >= totalTests / 2 ? 'healthy' : 'unhealthy'
    };

    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successfulTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${results.summary.successRate}%)`);
    console.log(`üéØ –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å: ${results.summary.overallStatus}`);
    
    console.groupEnd();
    
    return results;
}

/**
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
 * @param {number} recipeId ID —Ä–µ—Ü–µ–ø—Ç–∞
 */
export async function quickRecipeCheck(recipeId) {
    try {
        const url = `${BASE_API}/v1/recipes/${recipeId}`;
        const response = await fetch(url);
        
        if (response.ok) {
            const data = await response.json();
            console.log(`‚úÖ –†–µ—Ü–µ–ø—Ç ${recipeId} –¥–æ—Å—Ç—É–ø–µ–Ω:`, data.title);
            return { success: true, data };
        } else {
            console.warn(`‚ö†Ô∏è –†–µ—Ü–µ–ø—Ç ${recipeId} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
            return { success: false, status: response.status };
        }
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ü–µ–ø—Ç–∞ ${recipeId}:`, error);
        return { success: false, error: error.message };
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
if (typeof window !== 'undefined') {
    window.diagnoseRecipePage = diagnoseRecipePage;
    window.quickRecipeCheck = quickRecipeCheck;
}
