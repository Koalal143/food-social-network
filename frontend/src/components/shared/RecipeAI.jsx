"use client";

import { useState } from 'react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Card, CardContent } from "@/components/ui/card";

const COOKING_METHODS = [
  { id: 'pan', label: '–°–∫–æ–≤–æ—Ä–æ–¥–∫–∞' },
  { id: 'oven', label: '–î—É—Ö–æ–≤–∫–∞' },
  { id: 'pot', label: '–ö–∞—Å—Ç—Ä—é–ª—è' }
];

const COOKING_TIMES = [
  { id: 'quick', label: '–ë—ã—Å—Ç—Ä–æ (–¥–æ 30 –º–∏–Ω—É—Ç)', time: 30 },
  { id: 'medium', label: '–°—Ä–µ–¥–Ω–µ (30-60 –º–∏–Ω—É—Ç)', time: 60 },
  { id: 'long', label: '–î–æ–ª–≥–æ (–±–æ–ª–µ–µ 60 –º–∏–Ω—É—Ç)', time: 90 }
];

export default function RecipeAI() {
  const [step, setStep] = useState(0);
  const [cookingMethod, setCookingMethod] = useState('');
  const [cookingTime, setCookingTime] = useState('');
  const [ingredients, setIngredients] = useState('');
  const [generatedRecipe, setGeneratedRecipe] = useState('');

  const handleGenerateRecipe = () => {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞
    // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
    setGeneratedRecipe(`–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∏–∑ –≤–∞—à–∏—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (${ingredients}) 
    –Ω–∞ ${COOKING_METHODS.find(m => m.id === cookingMethod)?.label.toLowerCase()} 
    –∑–∞ ${COOKING_TIMES.find(t => t.id === cookingTime)?.label.toLowerCase()}...`);
    setStep(4);
  };

  const renderStep = () => {
    switch(step) {
      case 0:
        return (
          <div className="space-y-4 text-center">
            <h2 className="text-2xl font-bold text-primary">üë®‚Äçüç≥ –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –°–≤–∞–π–ø!</h2>
            <p className="text-muted-foreground">
              –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –≤–∫—É—Å–Ω–æ–µ –±–ª—é–¥–æ –∏–∑ –∏–º–µ—é—â–∏—Ö—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
              –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–∞—à–µ –∫—É–ª–∏–Ω–∞—Ä–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ!
            </p>
            <Button onClick={() => setStep(1)}>–ù–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤–∏—Ç—å</Button>
          </div>
        );

      case 1:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-semibold">–ù–∞ —á–µ–º –±—É–¥–µ–º –≥–æ—Ç–æ–≤–∏—Ç—å?</h3>
            <RadioGroup value={cookingMethod} onValueChange={setCookingMethod}>
              {COOKING_METHODS.map((method) => (
                <div key={method.id} className="flex items-center space-x-2">
                  <RadioGroupItem value={method.id} id={method.id} />
                  <Label htmlFor={method.id}>{method.label}</Label>
                </div>
              ))}
            </RadioGroup>
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(0)}>–ù–∞–∑–∞–¥</Button>
              <Button onClick={() => setStep(2)} disabled={!cookingMethod}>–î–∞–ª–µ–µ</Button>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-semibold">–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤—ã –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å?</h3>
            <RadioGroup value={cookingTime} onValueChange={setCookingTime}>
              {COOKING_TIMES.map((time) => (
                <div key={time.id} className="flex items-center space-x-2">
                  <RadioGroupItem value={time.id} id={time.id} />
                  <Label htmlFor={time.id}>{time.label}</Label>
                </div>
              ))}
            </RadioGroup>
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(1)}>–ù–∞–∑–∞–¥</Button>
              <Button onClick={() => setStep(3)} disabled={!cookingTime}>–î–∞–ª–µ–µ</Button>
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-semibold">–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —É –≤–∞—Å –µ—Å—Ç—å?</h3>
            <p className="text-sm text-muted-foreground">
              –ü–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å
            </p>
            <Input
              value={ingredients}
              onChange={(e) => setIngredients(e.target.value)}
              placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä–∏—Ü–∞, —Ä–∏—Å, –º–æ—Ä–∫–æ–≤—å, –ª—É–∫"
            />
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => setStep(2)}>–ù–∞–∑–∞–¥</Button>
              <Button onClick={handleGenerateRecipe} disabled={!ingredients}>
                –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç
              </Button>
            </div>
          </div>
        );

      case 4:
        return (
          <div className="space-y-4">
            <h3 className="text-xl font-semibold">–í–∞—à —Ä–µ—Ü–µ–ø—Ç –≥–æ—Ç–æ–≤! –ü—Ä–æ–±—É–π—Ç–µ –∏ –≤–∫—É—Å–Ω–æ –∫—É—à–∞–π—Ç–µ! üéâ</h3>
            <Card>
              <CardContent className="pt-6">
                <p>{generatedRecipe}</p>
              </CardContent>
            </Card>
            <div className="flex justify-between">
              <Button variant="outline" onClick={() => {
                setStep(0);
                setCookingMethod('');
                setCookingTime('');
                setIngredients('');
                setGeneratedRecipe('');
              }}>–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ</Button>
            </div>
          </div>
        );
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-6 space-y-6">
      {renderStep()}
    </div>
  );
} 