/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
 * –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */

async function createTestRecipe() {
    const testRecipe = {
        title: "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
        short_description: "–ü—Ä–æ—Å—Ç–æ–π —Ä–µ—Ü–µ–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è",
        difficulty: "easy",
        cook_time_minutes: 30,
        tags: [
            { name: "–¢–µ—Å—Ç" },
            { name: "–ó–∞–≤—Ç—Ä–∞–∫" }
        ],
        ingredients: [
            {
                name: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 1",
                amount: "100",
                unit: "–≥"
            },
            {
                name: "–¢–µ—Å—Ç–æ–≤—ã–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç 2", 
                amount: "2",
                unit: "—à—Ç"
            }
        ],
        instructions: [
            {
                step_number: 1,
                description: "–ü–µ—Ä–≤—ã–π —à–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"
            },
            {
                step_number: 2,
                description: "–í—Ç–æ—Ä–æ–π —à–∞–≥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"
            }
        ]
    };

    try {
        const response = await fetch('http://localhost:8000/v1/recipes', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('access_token')}`
            },
            body: JSON.stringify(testRecipe)
        });

        if (!response.ok) {
            const error = await response.json();
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞:', error);
            return null;
        }

        const recipe = await response.json();
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç —Å–æ–∑–¥–∞–Ω:', recipe);
        console.log(`üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ—Ü–µ–ø—Ç: http://localhost:3000/recipe/${recipe.id}`);
        return recipe;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞:', error);
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function createTestUser() {
    const testUser = {
        username: "testuser",
        email: "test@example.com",
        password: "testpassword123",
        first_name: "–¢–µ—Å—Ç",
        last_name: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    };

    try {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        const registerResponse = await fetch('http://localhost:8000/v1/auth/register', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(testUser)
        });

        if (!registerResponse.ok) {
            const error = await registerResponse.json();
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        } else {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω');
        }

        // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        const loginResponse = await fetch('http://localhost:8000/v1/auth/login', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                username: testUser.username,
                password: testUser.password
            })
        });

        if (!loginResponse.ok) {
            const error = await loginResponse.json();
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            return null;
        }

        const tokens = await loginResponse.json();
        localStorage.setItem('access_token', tokens.access_token);
        localStorage.setItem('refresh_token', tokens.refresh_token);
        
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
        return tokens;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        return null;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
async function setupTestEnvironment() {
    console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã...');
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
    const tokens = await createTestUser();
    if (!tokens) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç
    const recipe = await createTestRecipe();
    if (!recipe) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç');
        return;
    }

    console.log('üéâ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ä–µ–¥–∞ –≥–æ—Ç–æ–≤–∞!');
    console.log(`üìù ID —Ä–µ—Ü–µ–ø—Ç–∞: ${recipe.id}`);
    console.log(`üîó –°—Å—ã–ª–∫–∞: http://localhost:3000/recipe/${recipe.id}`);
    console.log('');
    console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è');
    console.log('3. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üîç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç');

    return recipe;
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.createTestRecipe = createTestRecipe;
window.createTestUser = createTestUser;
window.setupTestEnvironment = setupTestEnvironment;

console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
console.log('- setupTestEnvironment() - –ø–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã');
console.log('- createTestUser() - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
console.log('- createTestRecipe() - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞');
