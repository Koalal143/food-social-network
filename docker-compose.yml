services:
  nginx:
    image: nginx:stable-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - backend
      - frontend
      - minio
    networks:
      - app_network
      - minio_network
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app_network
      - minio_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      args:
        - SERVER__HOST=localhost
        - SERVER__PORT=8000
    ports:
      - "8000:8000"
    env_file:
      - backend/.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./backend/alembic:/app/alembic
    networks:
      - app_network
      - db_network
      - redis_network
      - minio_network
      - elasticsearch_network

  db:
    image: postgres:15
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=food_social_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db_network

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - redis_network

  elasticsearch:
    image: bitnami/elasticsearch:9.0.1

    environment:
      - discovery.type=single-node
      - security.enabled=true
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH__PASSWORD:-changeme}
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - ./elasticsearch_assets/elasticsearch.yml:/opt/bitnami/elasticsearch/config/elasticsearch.yml
      - ./elasticsearch_assets/analysis:/opt/bitnami/elasticsearch/config/analysis
      - elasticsearch_data:/bitnami/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
    restart: unless-stopped
    networks:
      - elasticsearch_network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - backend/.env
    environment:
      - MINIO_ROOT_USER=${S3_STORAGE__ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${S3_STORAGE__SECRET_KEY}
    command: minio server --console-address ':9001' /data &
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - minio_network

  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      mc alias set myminio http://minio:9000 $S3_STORAGE__ACCESS_KEY $S3_STORAGE__SECRET_KEY;
      mc mb myminio/images;

      exit 0;
      "
    env_file:
      - backend/.env
    networks:
      - minio_network

networks:
  db_network:
    driver: bridge
  redis_network:
    driver: bridge
  minio_network:
    driver: bridge
  app_network:
    driver: bridge
  elasticsearch_network:
    driver: bridge

volumes:
  alembic_data:
  postgres_data:
  redis_data:
  minio_data:
  elasticsearch_data:
