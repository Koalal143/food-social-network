services:
  nginx:
    image: nginx:stable-alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - './nginx.conf:/etc/nginx/nginx.conf'
    depends_on:
      - backend
      - frontend
    networks:
      - app_network

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app_network
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      args:
        - SERVER__HOST=localhost
        - SERVER__PORT=8000
    ports:
      - "8000:8000"
    environment:
      - SERVER__HOST=0.0.0.0
      - SERVER__PORT=8000
      - POSTGRES__USER=postgres
      - POSTGRES__PASSWORD=postgres
      - POSTGRES__HOST=db
      - POSTGRES__PORT=5432
      - POSTGRES__DB=food_social_network
      - REDIS__HOST=redis
      - REDIS__PORT=6379
      - JWT__SECRET_KEY=your-super-secret-key-in-production
      - MODE=dev
      - MINIO__HOST=minio
      - MINIO__PORT=9000
      - MINIO__ACCESS_KEY=minioadmin
      - MINIO__SECRET_KEY=minioadmin
      - MINIO__BUCKET=food-social-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./backend/alembic:/app/alembic
    restart: unless-stopped
    networks:
      - app_network
      - db_network
      - redis_network
      - minio_network

  db:
    image: postgres:15
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=food_social_network
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db_network

  redis:
    image: redis:7
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - redis_network

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=$S3_STORAGE__ACCESS_KEY
      - MINIO_ROOT_PASSWORD=$S3_STORAGE__SECRET_KEY
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - minio_network

networks:
  db_network:
    driver: bridge
  redis_network:
    driver: bridge
  minio_network:
    driver: bridge
  app_network:
    driver: bridge

volumes:
  alembic_data:
  postgres_data:
  redis_data:
  minio_data:
