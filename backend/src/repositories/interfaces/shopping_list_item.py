from collections.abc import Iterable, Sequence
from typing import Any, Protocol

from src.models.shopping_list_item import ShoppingListItem


class ShoppingListItemRepositoryProtocol(Protocol):
    async def get_by_id(self, item_id: int) -> ShoppingListItem | None: ...

    async def get_by_ids(self, item_ids: Iterable[int]) -> Sequence[ShoppingListItem]: ...

    async def get_all_by_user(
        self,
        user_id: int,
        skip: int = 0,
        limit: int = 100,
        *,
        only_not_purchased: bool = False,
    ) -> tuple[int, Sequence[ShoppingListItem]]: ...

    async def get_count(self, user_id: int, *, only_not_purchased: bool = False) -> int: ...

    async def create(self, **fields: Any) -> ShoppingListItem: ...

    async def bulk_create(self, user_id: int, items: list[dict[str, Any]]) -> Sequence[ShoppingListItem]: ...

    async def update(self, user_id: int, item_id: int, **fields: Any) -> ShoppingListItem | None: ...

    async def delete_by_id(self, user_id: int, item_id: int) -> None: ...

    async def delete_by_ids(self, user_id: int, item_ids: Sequence[int]) -> None: ...

    async def delete_by_user_id(self, user_id: int) -> None: ...

    async def toggle_purchased(self, user_id: int, item_id: int) -> ShoppingListItem | None: ...
